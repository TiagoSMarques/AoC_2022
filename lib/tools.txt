Print List:
let () = List.iter ~f:(printf "%d ") l_test

Benchmark:
[
     Core_bench.Bench.Test.create ~name:"Rev_Non_Rec" (fun () ->
         sumCals l_test |> findMax);
     Core_bench.Bench.Test.create ~name:"Rev_Rec" (fun () ->
         sumCals l_test |> findMax_1);
   ]
   |> Core_bench.Bench.bench 

(*optional to order the list*)
|> List.rev

Another way of finding max its the same speed:
let findMax_2 l_in =
   List.max_elt l_in ~compare:Int.compare |> function None -> 0 | Some n -> n 

(* If we are sure of the output 
let movefmt_2 move_line =
  let map_sp f f2 (a, b, c) l = f (f2 l a), f (f2 l b), f (f2 l c) in
  (* move m from f to t  *)
  map_sp Char.get_digit_exn List.nth_exn (5, 12, 17) (String.to_list move_line)
;; *)

make a loop

  let rec loop i =
    if i >= l then s ^ "."
    else if s.[i] = '.' || s.[i] = 'e' then s
    else loop (i + 1)
  in
    loop 0